local http = require "http"
local nmap = require "nmap"
local shortport = require "shortport"
local stdnse = require "stdnse"
local table = require "table"

description = [[
Performs a HEAD request for the root folder ("/") of a web server and displays the HTTP headers returned.
]]

---
-- @output
-- PORT   STATE SERVICE
-- 80/tcp open  http
-- | http-headers:
-- |   Date: Fri, 25 Jan 2013 17:39:08 GMT
-- |   Server: Apache/2.2.14 (Ubuntu)
-- |   Accept-Ranges: bytes
-- |   Vary: Accept-Encoding
-- |   Connection: close
-- |   Content-Type: text/html
-- |
-- |_  (Request type: HEAD)
--
--@args path The path to request, such as <code>/index.php</code>. Default <code>/</code>.
--@args useget Set to force GET requests instead of HEAD.

author = "Ron Bowes"

license = "Same as Nmap--See http://nmap.org/book/man-legal.html"

categories = {"discovery", "safe"}

portrule = shortport.http

portrule = function(host, port)
		return port.protocol == "tcp"
			and port.number == 80
			and port.state == "open"
        end 
        
action = function(host, port)
  local path = stdnse.get_script_args(SCRIPT_NAME..".path") or "/"
  local useget = stdnse.get_script_args(SCRIPT_NAME..".useget")
  local request_type = "HEAD"
  local status = false
  local result

  -- Check if the user didn't want HEAD to be used
  
  if(useget == nil) then
    -- Try using HEAD first
    status, result = http.can_use_head(host, port, nil, path)
  end
  
  -- If head failed, try using GET
   if(status == false) then
    stdnse.print_debug(1, "http-headers.nse: HEAD request failed, falling back to GET")
    --result = http.get(host, port, path)
    result = http.get(host, 80, path)
    request_type = "GET"
   end
  
  if(result == nil) then
    if(nmap.debugging() > 0) then
      return "ERROR: Header request failed"
    else
      return nil
    end
  end
  
   
  if(result.rawheader == nil) then
    if(nmap.debugging() > 0) then
      return "ERROR: Header request didn't return a proper header"
    else
      return nil
    end
  end
  
  idxdate =0
  idxserver = 0
  idxexpires = 0
  idxlastmodified=0
  idxacceptrange = 0
  idxcontentlength = 0
  idxvary = 0
  idxconn = 0
  idxconntype = 0
  table.insert(result.rawheader, "(Request type: " .. request_type .. ")")
  temp = result.rawheader
  for k,v in pairs(temp) do
	--print(k,v)
	if v:find("Date") ~= nil then
		idxdate = k
	end
	if v:find("Server") ~= nil then
		idxserver = k
	end
	if v:find("Last") ~= nil then
		idxlastmodified = k
	end
	if v:find("^Accept") ~= nil then
		idxacceptrange = k
	end
	if v:find("^Content%-Len") ~= nil then
		idxcontentlength = k
	end
	if v:find("Vary") ~= nil then
		idxvary = k
	end
	if v:find("Connection") ~= nil then
		idxconn = k
	end
	if v:find("Content%-Type") ~= nil then
		idxconntype = k
	end
	if v:find("Expires") ~= nil then
		idxexpires = k
	end
  end
  -- Date,Server,LastMod,Accept,ContentLength,ContentType
  if idxdate > 0 and idxserver > 0 then 
	if idxdate+1 == idxserver then 
		print("===========================================")
		print("Apache Detected")
		print("===========================================")
	end
  end

  --contenttype < Accept -> MS Server
  if idxconntype>0 and idxacceptrange > 0 then
	if idxconntype+1 == idxacceptrange then
		print("===========================================")
		print("MS Server Detected")
		print("===========================================")
    end
  end

  --contenttype<lastm
  if idxconntype > 0 and idxlastmodified > 0 then
	if idxconntype+1== idxlastmodified then
		print("===========================================")
		print("NetScape Server Detected")
		print("===========================================")
	end
  end

  --si date < contentlength -> SUNONE
  if idxconntype > 0 and idxcontentlength >0 then
	if idxcontentlength +1 == idxconntype  then
		print("===========================================")
		print("SUN ONE")
		print("===========================================")
	end
  end
  --return stdnse.format_output(true, result.rawheader)
end

